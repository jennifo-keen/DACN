import React, { useEffect, useRef, useState } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { vi } from "date-fns/locale";

import "./Home.css";

const slides = [
  {
    img: "/hero/slide1.jpg",
    title: "AQUAFIELD OCEAN CITY - T·ªî H·ª¢P SPA X√îNG H∆†I CAO C·∫§P B·∫¨C NH·∫§T VI·ªÜT NAM",
    sub: "M·ª´ng khai tr∆∞∆°ng ∆∞u ƒë√£i t·ªõi 30%!",
    desc: "·ªêc ƒë·∫£o th∆∞ gi√£n chu·∫©n H√†n gi·ªØa l√≤ng ph·ªë th·ªã v·ªõi kh√¥ng gian x√¥ng h∆°i t∆∞∆°ng - ·∫©m - l·∫°nh, ph√≤ng ƒë√° mu·ªëi Himalaya, ph√≤ng tuy·∫øt‚Ä¶",
    cta: "Kh√°m ph√° ngay",
    link: "#explore",
  },
  {
    img: "/hero/slide2.png",
    title: "KH√ÅM PH√Å PH√ö QU·ªêC",
    sub: "Combo si√™u ti·∫øt ki·ªám",
    desc: "V√© v√†o c·ªïng + tr√≤ ch∆°i + b·ªØa tr∆∞a ‚Äì t·ªëi ∆∞u cho gia ƒë√¨nh.",
    cta: "Xem ∆∞u ƒë√£i",
    link: "#deal",
  },
  {
    img: "/hero/slide3.jpg",
    title: "TR·∫¢I NGHI·ªÜM H·ªòI AN ‚Äì ƒê√Ä N·∫¥NG",
    sub: "Show ƒë√™m ƒë·∫∑c s·∫Øc",
    desc: "H√≤a m√¨nh v√†o kho·∫£nh kh·∫Øc lung linh b√™n s√¥ng v√† khu ph·ªë c·ªï.",
    cta: "ƒê·∫∑t v√©",
    link: "#book",
  },
];

export default function Home() {
  const [destinations, setDestinations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [idx, setIdx] = useState(0);
  const timer = useRef(null);

  const [isResultsVisible, setIsResultsVisible] = useState(false);
  const [selectedBranch, setSelectedBranch] = useState(null);
  const resultsRef = useRef(null);
  
  const [selectedDate, setSelectedDate] = useState(null);
  const [showCalendar, setShowCalendar] = useState(false);
  const calendarRef = useRef(null);

  useEffect(() => {
  const handleClickOutside = (event) => {
    if (
      resultsRef.current &&
      !resultsRef.current.contains(event.target) &&
      !event.target.closest(".searchField") 
    ) {
      setIsResultsVisible(false);
    }
  };

  document.addEventListener("mousedown", handleClickOutside);
  return () => {
    document.removeEventListener("mousedown", handleClickOutside);
  };
}, []);



  const toggleResults = () => {
    setIsResultsVisible(!isResultsVisible);
  };


  useEffect(() => {
  const fetchData = async () => {
    try {
      const response = await fetch("http://localhost:4000/api/provinces");
      const data = await response.json();
      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API th√†nh ƒë·ªãnh d·∫°ng ph√π h·ª£p v·ªõi destinations
      const formattedDestinations = data.map((province) => ({
        img: `/dest/${province.provinceName.toLowerCase().replace(" ", "-")}.jpg`,
        name: province.provinceName,
        sub: province.branches.length > 0 ? province.branches[0].description : "Kh√°m ph√° ƒëi·ªÉm ƒë·∫øn",
        branches: province.branches, 
      }));
      setDestinations(formattedDestinations);
    } catch (error) {
      console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
    } finally {
      setLoading(false);
    }
  };

  fetchData();
  }, []);


  const startAuto = () => {
    clearInterval(timer.current);
    timer.current = setInterval(() => {
      setIdx((i) => (i + 1) % slides.length);
    }, 5000);
  };

  useEffect(() => {
    startAuto();
    return () => clearInterval(timer.current);
  
  }, []);

  const go = (n) => {
    setIdx((i) => (i + n + slides.length) % slides.length);
    startAuto();
  };

  const s = slides[idx];

  const [per, setPer] = useState(3);
  const [iPage, setIPage] = useState(0);
  const totalPages = Math.max(1, destinations.length - per + 1);

  useEffect(() => {
    const onResize = () => {
      const w = window.innerWidth;
      const p = w < 720 ? 1 : w < 1024 ? 2 : 3;
      setPer(p);
      setIPage(0);
    };
    onResize();
    window.addEventListener("resize", onResize);
    return () => window.removeEventListener("resize", onResize);
  }, []);

  const nextPage = () => setIPage((p) => Math.min(p + 1, totalPages - 1));
  const prevPage = () => setIPage((p) => Math.max(p - 1, 0));

  if (loading) {
    return <div>Loading...</div>; // Hi·ªÉn th·ªã loading trong khi ch·ªù d·ªØ li·ªáu
  }

  const handleSearch = async () => {
    if (!selectedBranch) {
      alert("Vui l√≤ng ch·ªçn chi nh√°nh!");
      return;
    }

    if (!selectedDate) {
      alert("Vui l√≤ng ch·ªçn ng√†y!");
      return;
    }

    const payload = {
      branchId: selectedBranch.branchId,
      branchName: selectedBranch.branchName,
      provinceName: selectedBranch.provinceName,
      date: selectedDate.toISOString().split("T")[0], 
    };

    try {
      const response = await fetch("http://localhost:4000/api/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!response.ok) throw new Error("L·ªói khi g·ª≠i d·ªØ li·ªáu!");

      const result = await response.json();
      console.log("K·∫øt qu·∫£ t·ª´ server:", result);
      alert("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói khi g·ª≠i d·ªØ li·ªáu:", error);
      alert("G·ª≠i d·ªØ li·ªáu th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
    }
};


  return (
    <div className="home">
      <section className="hero" style={{ backgroundImage: `url(${s.img})` }}>
        <div className="hero__overlay" />

        <div className="hero__content">
          <h1 className="hero__title">{s.title}</h1>
          <p className="hero__sub">{s.sub}</p>
          <p className="hero__desc">{s.desc}</p>
          <a href={s.link} className="btn btn--ghost">{s.cta}</a>
        </div>

        <button className="hero__arrow left" onClick={() => go(-1)} aria-label="Prev">‚Äπ</button>
        <button className="hero__arrow right" onClick={() => go(1)} aria-label="Next">‚Ä∫</button>

        <div className="hero__dots">
          {slides.map((_, i) => (
            <button
              key={i}
              className={`dot ${i === idx ? "is-active" : ""}`}
              onClick={() => setIdx(i)}
              aria-label={`Slide ${i + 1}`}
            />
          ))}
        </div>
      </section>
        {/* SEARCH BAR */}
      <div className="searchCard">
        <div className="searchField" onClick={toggleResults}>
          <div className="des">
            <span className="select">
              {selectedBranch
                ? `${selectedBranch.provinceName} - ${selectedBranch.branchName}`
              : "Ch·ªçn chi nh√°nh"}
            </span>
          <span className="ic-down"></span>
        </div>
      </div>

      <div
          className="searchField date-input"
          onClick={() => {
            setShowCalendar(!showCalendar);
            setIsResultsVisible(false); 
          }}
        >
      <span className="ic">üìÖ</span>
        <div className="des">
          <span className="select">
            {selectedDate
              ? selectedDate.toLocaleDateString("vi-VN")
             : "Ch·ªçn ng√†y"}
           </span>
        </div>
       </div>


        {/* Popup l·ªãch */}
        {showCalendar && (
          <div ref={calendarRef} className="calendar-popup">
            <DatePicker
              selected={selectedDate}
              onChange={(date) => setSelectedDate(date)}
              inline
              dateFormat="dd/MM/yyyy"
              locale={vi}
              minDate={new Date()}
            />
          </div>
        )}

        <button className="btn btn--search"  onClick={handleSearch}>T√¨m ki·∫øm</button>

      </div>
      <div ref={resultsRef} className={`resultsFrame ${isResultsVisible ? "active" : ""}`}>
        {destinations.length > 0 ? (
          destinations.map((province, pIndex) => (
            <div key={pIndex} className="province-group">
              <div className="province__name">üìç{province.name}</div>

              <div className="branch__list">
                {province.branches && province.branches.length > 0 ? (
                  province.branches.map((branch, bIndex) => (
                    <div
                      key={bIndex}
                      className="branch__item"
                      onClick={() => {
                        setSelectedBranch({
                          provinceName: province.name,
                          branchName: branch.branchName,
                          branchId: branch.id_branch, 
                        });
                        setIsResultsVisible(false);
                      }}
                    >
                      <span className="branchName">{branch.branchName}</span>
                    </div>
                  ))
                ) : (
                  <p>Kh√¥ng c√≥ chi nh√°nh n√†o.</p>
                )}
              </div>
            </div>
          ))
        ) : (
          <p>Kh√¥ng c√≥ d·ªØ li·ªáu.</p>
        )}
      </div>
      {/* ===== EXPERIENCE GRID ===== */}
      <section className="experience">
        <h2 className="experience__title">TR·∫¢I NGHI·ªÜM VINWONDERS</h2>
        <div className="experience__grid">
          <div className="expCard">
            <img src="/exp/exp1.jpg" alt="Kh√°m ph√° di·ªáu k·ª≥" />
            <div className="expCard__label">KH√ÅM PH√Å DI·ªÜU K·ª≤</div>
          </div>
          <div className="expCard">
            <img src="/exp/exp2.jpg" alt="Tr·∫£i nghi·ªám vƒÉn h√≥a" />
            <div className="expCard__label">TR·∫¢I NGHI·ªÜM VƒÇN H√ìA</div>
          </div>
          <div className="expCard">
            <img src="/exp/exp3.jpg" alt="Gi·∫£i tr√≠ di·ªáu k·ª≥" />
            <div className="expCard__label">GI·∫¢I TR√ç DI·ªÜU K·ª≤</div>
          </div>
          <div className="expCard">
            <img src="/exp/exp4.jpg" alt="L·ªÖ h·ªôi di·ªáu k·ª≥" />
            <div className="expCard__label">L·ªÑ H·ªòI DI·ªÜU K·ª≤</div>
          </div>
        </div>
      </section>

      {/* ===== DESTINATIONS CAROUSEL ===== */}
      <section className="dest">
        <h2 className="dest__title">KH√ÅM PH√Å C√ÅC ƒêI·ªÇM ƒê·∫æN C·ª¶A VINWONDERS!</h2>

        <div className="dest__wrap">
          <button
            className="dest__arrow left"
            onClick={prevPage}
            aria-label="Prev"
            disabled={iPage === 0}
          >‚Äπ</button>

          {/* MASK ƒë·ªÉ canh gi·ªØa + ·∫©n tr√†n */}
          <div className="dest__mask">
            <div
              className="dest__viewport"
              style={{
                "--per": `${per}`, // CSS var ph·∫£i l√† chu·ªói
                transform: `translateX(calc(${iPage} * -100% / var(--per)))`,
              }}
            >
              {destinations.map((d, i) => (
                <div className="dest__item" key={i}>
                  <div className="dest__pic">
                    <img src={d.image_branch} alt={d.name} />
                  </div>
                  <h3 className="dest__name">{d.name}</h3>
                  <p className="dest__sub">{d.sub}</p>
                </div>
              ))}
            </div>
          </div>

          <button
            className="dest__arrow right"
            onClick={nextPage}
            aria-label="Next"
            disabled={iPage >= totalPages - 1}
          >‚Ä∫</button>
        </div>

        <div className="dest__dots">
          {Array.from({ length: totalPages }).map((_, k) => (
            <button
              key={k}
              className={`dot ${k === iPage ? "is-active" : ""}`}
              onClick={() => setIPage(k)}
              aria-label={`ƒêi t·ªõi trang ${k + 1}`}
            />
          ))}
        </div>
      </section>
    </div>
  );
}